
project_domotica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  000002f4  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080009a  0080009a  000003c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001360  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ef  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000923  00000000  00000000  000022db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e0  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c54  00000000  00000000  00003534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	3a c0       	rjmp	.+116    	; 0x78 <__vector_1>
   4:	43 c0       	rjmp	.+134    	; 0x8c <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	34 c1       	rjmp	.+616    	; 0x278 <__vector_7>
  10:	04 c1       	rjmp	.+520    	; 0x21a <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ef       	ldi	r30, 0xF4	; 244
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 39       	cpi	r26, 0x9A	; 154
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e9       	ldi	r26, 0x9A	; 154
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 3a       	cpi	r26, 0xA2	; 162
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	93 d0       	rcall	.+294    	; 0x180 <main>
  5a:	4a c1       	rjmp	.+660    	; 0x2f0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_external_interrupt0_gpio>:
 void init_external_interrupt1_gpio(void){
	 MCUCR |= (1 << ISC10);				//The rising edge of INT1 generates an interrupt request
	 MCUCR |= (1 << ISC11);
	 
	 GIMSK |= (1 << INT1);				//enable external interrupt 1 in general interrupt mask register
	 SREG |= (1 << SREG_I);				//enable interrupts I in global status register
  5e:	85 b7       	in	r24, 0x35	; 53
  60:	81 60       	ori	r24, 0x01	; 1
  62:	85 bf       	out	0x35, r24	; 53
  64:	85 b7       	in	r24, 0x35	; 53
  66:	82 60       	ori	r24, 0x02	; 2
  68:	85 bf       	out	0x35, r24	; 53
  6a:	8b b7       	in	r24, 0x3b	; 59
  6c:	80 64       	ori	r24, 0x40	; 64
  6e:	8b bf       	out	0x3b, r24	; 59
  70:	8f b7       	in	r24, 0x3f	; 63
  72:	80 68       	ori	r24, 0x80	; 128
  74:	8f bf       	out	0x3f, r24	; 63
  76:	08 95       	ret

00000078 <__vector_1>:
  78:	1f 92       	push	r1
  7a:	0f 92       	push	r0
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
  82:	0f 90       	pop	r0
  84:	0f be       	out	0x3f, r0	; 63
  86:	0f 90       	pop	r0
  88:	1f 90       	pop	r1
  8a:	18 95       	reti

0000008c <__vector_2>:
 }
 
 ISR(INT1_vect){						//External interrupt1 service routine
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
	  
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <send_acknowledgement>:
	}
}


void send_acknowledgement(int parity_failed){
	if(parity_failed == 1){
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	19 f4       	brne	.+6      	; 0xaa <send_acknowledgement+0xa>
		uart_putc(0x30);//send NACK
  a4:	80 e3       	ldi	r24, 0x30	; 48
  a6:	9c d0       	rcall	.+312    	; 0x1e0 <uart_putc>
  a8:	08 95       	ret
		parity_failed = 0;
	}
	else if(UCSRA & (1<<RXC)){
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <send_acknowledgement+0x14>
		uart_putc(0x03);//UART is busy
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	97 d0       	rcall	.+302    	; 0x1e0 <uart_putc>
  b2:	08 95       	ret
	}
	else{
		uart_putc(0x33);//send ACK
  b4:	83 e3       	ldi	r24, 0x33	; 51
  b6:	94 d0       	rcall	.+296    	; 0x1e0 <uart_putc>
  b8:	08 95       	ret

000000ba <receive_KNX>:
	static int count;
	static int amount_messages = 7;//amount of messages without user data
	static int parity_failed = 0;


		c = uart_getc();
  ba:	70 d0       	rcall	.+224    	; 0x19c <uart_getc>
		if(UCSRA &(1<<UPE)){//parity check
  bc:	5a 9b       	sbis	0x0b, 2	; 11
  be:	06 c0       	rjmp	.+12     	; 0xcc <receive_KNX+0x12>
			//parity check failed
			parity_failed = 1;
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	30 93 9d 00 	sts	0x009D, r19	; 0x80009d <parity_failed.2077+0x1>
  c8:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <parity_failed.2077>
		}
		data_buffer[count] = c;
  cc:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <__data_end>
  d0:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <__data_end+0x1>
  d4:	f9 01       	movw	r30, r18
  d6:	ee 59       	subi	r30, 0x9E	; 158
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 83       	st	Z, r24
		if(count == 5){
  dc:	25 30       	cpi	r18, 0x05	; 5
  de:	31 05       	cpc	r19, r1
  e0:	b1 f5       	brne	.+108    	; 0x14e <__stack+0x6f>
			uint8_t length = c & 0x0F;
			amount_messages += length;//add userdata to the amount of messages
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
  e8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
  ec:	a9 01       	movw	r20, r18
  ee:	48 0f       	add	r20, r24
  f0:	51 1d       	adc	r21, r1
  f2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__data_start+0x1>
  f6:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	52 e2       	ldi	r21, 0x22	; 34
  fc:	5a 95       	dec	r21
  fe:	f1 f7       	brne	.-4      	; 0xfc <__stack+0x1d>
 100:	00 c0       	rjmp	.+0      	; 0x102 <__stack+0x23>
 102:	82 e2       	ldi	r24, 0x22	; 34
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <__stack+0x25>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__stack+0x2b>
		}
		wait_bit();//wait 2 bits
		wait_bit();
		count++;
 10a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__data_end>
 10e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__data_end+0x1>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__data_end+0x1>
 118:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__data_end>
	//}
	int i;
	if(count == amount_messages){
 11c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 120:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 124:	82 17       	cp	r24, r18
 126:	93 07       	cpc	r25, r19
 128:	51 f5       	brne	.+84     	; 0x17e <__stack+0x9f>
}

						//receive
//------------------------------------------------------------------------------

void receive_KNX(void){
 12a:	8b e0       	ldi	r24, 0x0B	; 11
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	22 e2       	ldi	r18, 0x22	; 34
 130:	2a 95       	dec	r18
 132:	f1 f7       	brne	.-4      	; 0x130 <__stack+0x51>
 134:	00 c0       	rjmp	.+0      	; 0x136 <__stack+0x57>
 136:	01 97       	sbiw	r24, 0x01	; 1
		wait_bit();
		count++;
	//}
	int i;
	if(count == amount_messages){
		for(i = 0; i < 11; i++)//wait 11  bits before sending an acknowledge frame (11 + 2 = 13)
 138:	d1 f7       	brne	.-12     	; 0x12e <__stack+0x4f>
		{
			wait_bit();
		}
		send_acknowledgement(parity_failed);
 13a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <parity_failed.2077>
 13e:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <parity_failed.2077+0x1>
 142:	ae df       	rcall	.-164    	; 0xa0 <send_acknowledgement>
		count = 0;
 144:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__data_end+0x1>
 148:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__data_end>
	}

}
 14c:	08 95       	ret
 14e:	42 e2       	ldi	r20, 0x22	; 34
 150:	4a 95       	dec	r20
 152:	f1 f7       	brne	.-4      	; 0x150 <__stack+0x71>
 154:	00 c0       	rjmp	.+0      	; 0x156 <__stack+0x77>
 156:	52 e2       	ldi	r21, 0x22	; 34
 158:	5a 95       	dec	r21
 15a:	f1 f7       	brne	.-4      	; 0x158 <__stack+0x79>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <__stack+0x7f>
			uint8_t length = c & 0x0F;
			amount_messages += length;//add userdata to the amount of messages
		}
		wait_bit();//wait 2 bits
		wait_bit();
		count++;
 15e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__data_end>
 162:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__data_end+0x1>
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__data_end+0x1>
 16c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__data_end>
	//}
	int i;
	if(count == amount_messages){
 170:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 174:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 178:	82 17       	cp	r24, r18
 17a:	93 07       	cpc	r25, r19
 17c:	b1 f2       	breq	.-84     	; 0x12a <__stack+0x4b>
 17e:	08 95       	ret

00000180 <main>:
#define BUFFER_SIZE 16
//static uint8_t rx_buffer[BUFFER_SIZE] = "";

int main(void)
{
	init_external_interrupt0_gpio();
 180:	6e df       	rcall	.-292    	; 0x5e <init_external_interrupt0_gpio>
	
	uint8_t i = 0;
	uint16_t c = 0;

	init_uart();
 182:	04 d0       	rcall	.+8      	; 0x18c <init_uart>

	sei();
 184:	78 94       	sei

	while (1) {
		uart_putc(0b11101010);
 186:	8a ee       	ldi	r24, 0xEA	; 234
 188:	2b d0       	rcall	.+86     	; 0x1e0 <uart_putc>
 18a:	fd cf       	rjmp	.-6      	; 0x186 <main+0x6>

0000018c <init_uart>:
volatile static uint8_t sent = TRUE;

//initialize uart
void init_uart(void) {
  // set baud rate
  UBRRH = (uint8_t)(MYUBBR >> 8); 
 18c:	12 b8       	out	0x02, r1	; 2
  UBRRL = (uint8_t)(MYUBBR);
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	89 b9       	out	0x09, r24	; 9
  // enable receive and transmit
  UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 192:	88 e9       	ldi	r24, 0x98	; 152
 194:	8a b9       	out	0x0a, r24	; 10
  // set frame format
  UCSRC = (0 << USBS) | (3 << UCSZ0) | (1 << UPM1);	// asynchron 8n1 and even bit parity
 196:	86 e2       	ldi	r24, 0x26	; 38
 198:	83 b9       	out	0x03, r24	; 3
 19a:	08 95       	ret

0000019c <uart_getc>:

//get a char from the buffer
uint16_t uart_getc(void) {
  uint8_t c = 0;
  uint8_t tmp_tail = 0;
  if (rx_head == rx_tail) {//there is no data in the buffer
 19c:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <rx_head>
 1a0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <rx_tail>
 1a4:	98 17       	cp	r25, r24
 1a6:	c9 f0       	breq	.+50     	; 0x1da <uart_getc+0x3e>
    return UART_NO_DATA;
  }
  tmp_tail = (rx_tail + 1) % BUFFER_SIZE;//goes from 0 to 15 and then to 0
 1a8:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <rx_tail>
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	2f 70       	andi	r18, 0x0F	; 15
 1b4:	30 78       	andi	r19, 0x80	; 128
 1b6:	33 23       	and	r19, r19
 1b8:	34 f4       	brge	.+12     	; 0x1c6 <uart_getc+0x2a>
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	31 09       	sbc	r19, r1
 1be:	20 6f       	ori	r18, 0xF0	; 240
 1c0:	3f 6f       	ori	r19, 0xFF	; 255
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
 1c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c = rx_buffer[rx_tail];//get the last byte from the buffer
 1c6:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <rx_tail>
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	e7 57       	subi	r30, 0x77	; 119
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	80 81       	ld	r24, Z
  rx_tail = tmp_tail;//rx_tail is increased by one
 1d2:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <rx_tail>
  return c;
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	08 95       	ret
//get a char from the buffer
uint16_t uart_getc(void) {
  uint8_t c = 0;
  uint8_t tmp_tail = 0;
  if (rx_head == rx_tail) {//there is no data in the buffer
    return UART_NO_DATA;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	91 e0       	ldi	r25, 0x01	; 1
  tmp_tail = (rx_tail + 1) % BUFFER_SIZE;//goes from 0 to 15 and then to 0
  c = rx_buffer[rx_tail];//get the last byte from the buffer
  rx_tail = tmp_tail;//rx_tail is increased by one
  return c;

}
 1de:	08 95       	ret

000001e0 <uart_putc>:

 //put a single char in the ringbuffer
void uart_putc(uint8_t c) {
  uint8_t tmp_head = (tx_head + 1) % BUFFER_SIZE;//goes from 0 to 15 and then to 0
 1e0:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <tx_head>
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	2f 70       	andi	r18, 0x0F	; 15
 1ec:	30 78       	andi	r19, 0x80	; 128
 1ee:	33 23       	and	r19, r19
 1f0:	34 f4       	brge	.+12     	; 0x1fe <uart_putc+0x1e>
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	31 09       	sbc	r19, r1
 1f6:	20 6f       	ori	r18, 0xF0	; 240
 1f8:	3f 6f       	ori	r19, 0xFF	; 255
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
  // wait for space in buffer
  while (tmp_head == tx_tail) {//if the head is the same as the tail there has to be waited on the ISR
 1fe:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <tx_tail>
 202:	29 17       	cp	r18, r25
 204:	e1 f3       	breq	.-8      	; 0x1fe <uart_putc+0x1e>
    ;
  }
  tx_buffer[tx_head] = c;//put c in the ringbuffer
 206:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <tx_head>
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e7 58       	subi	r30, 0x87	; 135
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	80 83       	st	Z, r24
  tx_head = tmp_head;
 212:	20 93 9f 00 	sts	0x009F, r18	; 0x80009f <tx_head>
  // enable uart data interrupt (send data)
  UCSRB |= (1<<UDRIE);
 216:	55 9a       	sbi	0x0a, 5	; 10
 218:	08 95       	ret

0000021a <__vector_8>:
}

//send a char out of the buffer
ISR(USART_UDRE_vect) {
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
  uint8_t tmp_tail = 0;
  if (tx_head != tx_tail) {//check if there is any more data to send
 22c:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <tx_head>
 230:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <tx_tail>
 234:	98 17       	cp	r25, r24
 236:	b1 f0       	breq	.+44     	; 0x264 <__vector_8+0x4a>
    tmp_tail = (tx_tail + 1) % BUFFER_SIZE;//goes from 0 to 15 and then to 0
 238:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <tx_tail>
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	8f 70       	andi	r24, 0x0F	; 15
 242:	90 78       	andi	r25, 0x80	; 128
 244:	99 23       	and	r25, r25
 246:	24 f4       	brge	.+8      	; 0x250 <__vector_8+0x36>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	80 6f       	ori	r24, 0xF0	; 240
 24c:	9f 6f       	ori	r25, 0xFF	; 255
 24e:	01 96       	adiw	r24, 0x01	; 1
    UDR = tx_buffer[tx_tail];//put the last byte of the buffer into the uart register
 250:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <tx_tail>
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	e7 58       	subi	r30, 0x87	; 135
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	90 81       	ld	r25, Z
 25c:	9c b9       	out	0x0c, r25	; 12
    tx_tail = tmp_tail;
 25e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <tx_tail>
 262:	01 c0       	rjmp	.+2      	; 0x266 <__vector_8+0x4c>
  }
  else {
    // disable this interrupt if nothing more to send
    UCSRB &= ~(1 << UDRIE);
 264:	55 98       	cbi	0x0a, 5	; 10
  }
}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_7>:

//Receive a char from UART and stores it in ring buffer
ISR(USART_RX_vect) {
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
  uint8_t tmp_head = 0;
  tmp_head = (rx_head + 1) % BUFFER_SIZE;//goes from 0 to 15 and then to 0
 29a:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <rx_head>
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	90 78       	andi	r25, 0x80	; 128
 2a6:	99 23       	and	r25, r25
 2a8:	24 f4       	brge	.+8      	; 0x2b2 <__vector_7+0x3a>
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	80 6f       	ori	r24, 0xF0	; 240
 2ae:	9f 6f       	ori	r25, 0xFF	; 255
 2b0:	01 96       	adiw	r24, 0x01	; 1
  if (tmp_head == rx_tail) {//the buffer is full because the head hit the tail
 2b2:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <rx_tail>
 2b6:	28 17       	cp	r18, r24
 2b8:	51 f0       	breq	.+20     	; 0x2ce <__vector_7+0x56>
    // buffer overflow error!
  }
  else{

		rx_buffer[rx_head] = UDR;//put data in the rx buffer
 2ba:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <rx_head>
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	9c b1       	in	r25, 0x0c	; 12
 2c2:	e7 57       	subi	r30, 0x77	; 119
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	90 83       	st	Z, r25
		rx_head = tmp_head;  //give the new location of rx head (old rx_head + 1)  
 2c8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <rx_head>
		receive_KNX();
 2cc:	f6 de       	rcall	.-532    	; 0xba <receive_KNX>
  }
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
