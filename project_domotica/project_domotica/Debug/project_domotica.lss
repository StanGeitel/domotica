
project_domotica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000684  00000718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800080  00800080  00000738  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b87  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d26  00000000  00000000  0000252f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d8d  00000000  00000000  00003255  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000514  00000000  00000000  00003fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a4  00000000  00000000  000044f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011c1  00000000  00000000  00004c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00005e5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	89 c1       	rjmp	.+786    	; 0x316 <__vector_1>
   4:	92 c1       	rjmp	.+804    	; 0x32a <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__vector_6>
   e:	0b c3       	rjmp	.+1558   	; 0x626 <__vector_7>
  10:	db c2       	rjmp	.+1462   	; 0x5c8 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	30 c2       	rjmp	.+1120   	; 0x478 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e8       	ldi	r30, 0x84	; 132
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e8       	ldi	r26, 0x80	; 128
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 3a       	cpi	r26, 0xAA	; 170
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	be d1       	rcall	.+892    	; 0x3d6 <main>
  5a:	12 c3       	rjmp	.+1572   	; 0x680 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_6>:

 volatile DBNC_GLOBAL db;

 //ISR for timer0 overflow interrupt
 ISR(TIMER0_OVF_vect)
 {
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	cf 92       	push	r12
  6a:	df 92       	push	r13
  6c:	ef 92       	push	r14
  6e:	ff 92       	push	r15
  70:	0f 93       	push	r16
  72:	1f 93       	push	r17
  74:	2f 93       	push	r18
  76:	3f 93       	push	r19
  78:	4f 93       	push	r20
  7a:	5f 93       	push	r21
  7c:	6f 93       	push	r22
  7e:	7f 93       	push	r23
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
  84:	af 93       	push	r26
  86:	bf 93       	push	r27
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	d0 e0       	ldi	r29, 0x00	; 0
	 uint8_t i;
	 uint8_t temp;
	 uint8_t workDone = 0;
  94:	40 e0       	ldi	r20, 0x00	; 0
	 {
		 //Skip items that have been idle
		 if (db.dbUnits[i].counter == 0)
		 continue;

		 workDone = 1;
  96:	dd 24       	eor	r13, r13
  98:	d3 94       	inc	r13
			 //If current state != last state
			 //store change
			 if (temp != ((db.dbUnits[i].bitmap & _BV(5)) >> 5))
			 {
				 //Flip last state bit
				 db.dbUnits[i].bitmap ^= _BV(5);
  9a:	68 94       	set
  9c:	cc 24       	eor	r12, r12
  9e:	c5 f8       	bld	r12, 5
				 //If this debouncer item is synchronous
				 //Then signal it
				 if (!(db.dbUnits[i].bitmap & _BV(7))) {

					 //Signal this debouncer item
					 db.dbUnits[i].bitmap |= _BV(6);
  a0:	0f 2e       	mov	r0, r31
  a2:	f4 e8       	ldi	r31, 0x84	; 132
  a4:	ef 2e       	mov	r14, r31
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	ff 2e       	mov	r15, r31
  aa:	f0 2d       	mov	r31, r0
  ac:	8c 2f       	mov	r24, r28

	 //Cycle through all debounced items
	 for (i=0;i<DBNC_NUM_DEBOUNCERS;i++)
	 {
		 //Skip items that have been idle
		 if (db.dbUnits[i].counter == 0)
  ae:	9e 01       	movw	r18, r28
  b0:	fe 01       	movw	r30, r28
  b2:	ee 0f       	add	r30, r30
  b4:	ff 1f       	adc	r31, r31
  b6:	ec 0f       	add	r30, r28
  b8:	fd 1f       	adc	r31, r29
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	ec 57       	subi	r30, 0x7C	; 124
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	94 81       	ldd	r25, Z+4	; 0x04
  c4:	99 23       	and	r25, r25
  c6:	09 f4       	brne	.+2      	; 0xca <__vector_6+0x6c>
  c8:	66 c0       	rjmp	.+204    	; 0x196 <__stack+0xb7>
		 continue;

		 workDone = 1;

		 //If debounce period has elapsed
		 if (--db.dbUnits[i].counter == 0)
  ca:	fe 01       	movw	r30, r28
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	ec 0f       	add	r30, r28
  d2:	fd 1f       	adc	r31, r29
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	ec 57       	subi	r30, 0x7C	; 124
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	94 81       	ldd	r25, Z+4	; 0x04
  de:	91 50       	subi	r25, 0x01	; 1
  e0:	94 83       	std	Z+4, r25	; 0x04
  e2:	91 11       	cpse	r25, r1
  e4:	55 c0       	rjmp	.+170    	; 0x190 <__stack+0xb1>
		 {
			 
			 //Grab current logical bit state of the port (1 or 0)
			 temp = (((*(db.dbUnits[i].port)) & _BV((db.dbUnits[i].bitmap & 0b111))) != 0);
  e6:	f9 01       	movw	r30, r18
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e2 0f       	add	r30, r18
  ee:	f3 1f       	adc	r31, r19
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	ec 57       	subi	r30, 0x7C	; 124
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	a0 81       	ld	r26, Z
  fa:	b1 81       	ldd	r27, Z+1	; 0x01
  fc:	6c 91       	ld	r22, X
  fe:	95 81       	ldd	r25, Z+5	; 0x05
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	97 70       	andi	r25, 0x07	; 7
 104:	02 c0       	rjmp	.+4      	; 0x10a <__stack+0x2b>
 106:	75 95       	asr	r23
 108:	67 95       	ror	r22
 10a:	9a 95       	dec	r25
 10c:	e2 f7       	brpl	.-8      	; 0x106 <__stack+0x27>
 10e:	61 70       	andi	r22, 0x01	; 1

			 //If current state != last state
			 //store change
			 if (temp != ((db.dbUnits[i].bitmap & _BV(5)) >> 5))
 110:	95 81       	ldd	r25, Z+5	; 0x05
 112:	46 2f       	mov	r20, r22
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	95 fb       	bst	r25, 5
 118:	00 27       	eor	r16, r16
 11a:	00 f9       	bld	r16, 0
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	40 17       	cp	r20, r16
 120:	51 07       	cpc	r21, r17
 122:	c1 f1       	breq	.+112    	; 0x194 <__stack+0xb5>
			 {
				 //Flip last state bit
				 db.dbUnits[i].bitmap ^= _BV(5);
 124:	f9 01       	movw	r30, r18
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e2 0f       	add	r30, r18
 12c:	f3 1f       	adc	r31, r19
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	ec 57       	subi	r30, 0x7C	; 124
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	95 81       	ldd	r25, Z+5	; 0x05
 138:	9c 25       	eor	r25, r12
 13a:	95 83       	std	Z+5, r25	; 0x05

				 //If this debouncer item is synchronous
				 //Then signal it
				 if (!(db.dbUnits[i].bitmap & _BV(7))) {
 13c:	95 81       	ldd	r25, Z+5	; 0x05
 13e:	99 23       	and	r25, r25
 140:	c4 f0       	brlt	.+48     	; 0x172 <__stack+0x93>

					 //Signal this debouncer item
					 db.dbUnits[i].bitmap |= _BV(6);
 142:	c9 01       	movw	r24, r18
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	fc 01       	movw	r30, r24
 14a:	e2 0f       	add	r30, r18
 14c:	f3 1f       	adc	r31, r19
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	ec 57       	subi	r30, 0x7C	; 124
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	45 81       	ldd	r20, Z+5	; 0x05
 158:	40 64       	ori	r20, 0x40	; 64
 15a:	fc 01       	movw	r30, r24
 15c:	e2 0f       	add	r30, r18
 15e:	f3 1f       	adc	r31, r19
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	ec 57       	subi	r30, 0x7C	; 124
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	45 83       	std	Z+5, r20	; 0x05

					 //Signaling options
					 db.signalReady = 1;
 16a:	f7 01       	movw	r30, r14
 16c:	d4 a2       	std	Z+36, r13	; 0x24
	 {
		 //Skip items that have been idle
		 if (db.dbUnits[i].counter == 0)
		 continue;

		 workDone = 1;
 16e:	4d 2d       	mov	r20, r13
 170:	12 c0       	rjmp	.+36     	; 0x196 <__stack+0xb7>

				 //Otherwise it's asynchronous,
				 //call immediately
				 else
				 //Call Handler
				 (*db.dbUnits[i].handler)(i,temp);
 172:	f9 01       	movw	r30, r18
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	e2 0f       	add	r30, r18
 17a:	f3 1f       	adc	r31, r19
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ec 57       	subi	r30, 0x7C	; 124
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	02 80       	ldd	r0, Z+2	; 0x02
 186:	f3 81       	ldd	r31, Z+3	; 0x03
 188:	e0 2d       	mov	r30, r0
 18a:	09 95       	icall
	 {
		 //Skip items that have been idle
		 if (db.dbUnits[i].counter == 0)
		 continue;

		 workDone = 1;
 18c:	4d 2d       	mov	r20, r13
 18e:	03 c0       	rjmp	.+6      	; 0x196 <__stack+0xb7>
 190:	4d 2d       	mov	r20, r13
 192:	01 c0       	rjmp	.+2      	; 0x196 <__stack+0xb7>
 194:	4d 2d       	mov	r20, r13
 196:	21 96       	adiw	r28, 0x01	; 1
	 uint8_t i;
	 uint8_t temp;
	 uint8_t workDone = 0;

	 //Cycle through all debounced items
	 for (i=0;i<DBNC_NUM_DEBOUNCERS;i++)
 198:	c6 30       	cpi	r28, 0x06	; 6
 19a:	d1 05       	cpc	r29, r1
 19c:	09 f0       	breq	.+2      	; 0x1a0 <__stack+0xc1>
 19e:	86 cf       	rjmp	.-244    	; 0xac <__vector_6+0x4e>
			 }
		 }
	 }

	 //If all counters were already 0, disable the timer
	 if (!workDone)
 1a0:	41 11       	cpse	r20, r1
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <__stack+0xc7>
	 TCCR0B = 0;
 1a4:	13 be       	out	0x33, r1	; 51

	 TCNT0  = DBNC_TIMR0_BASEVAL;
 1a6:	82 eb       	ldi	r24, 0xB2	; 178
 1a8:	82 bf       	out	0x32, r24	; 50
 }
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	cf 90       	pop	r12
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <callSignaledHandlers>:

 //Call any signaled handlers (to be executed in main program loop)
 void callSignaledHandlers(void)
 {
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
	 int i;

	 if (!db.signalReady) return;
 1e0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <db+0x24>
 1e4:	88 23       	and	r24, r24
 1e6:	11 f1       	breq	.+68     	; 0x22c <callSignaledHandlers+0x50>
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
	 
	 for (i=0;i<DBNC_NUM_DEBOUNCERS;i++)
	 {
		 //Check if this item is signaled
		 if (db.dbUnits[i].bitmap & _BV(6)) {
 1ec:	fe 01       	movw	r30, r28
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ec 0f       	add	r30, r28
 1f4:	fd 1f       	adc	r31, r29
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	ec 57       	subi	r30, 0x7C	; 124
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	85 81       	ldd	r24, Z+5	; 0x05
 200:	86 ff       	sbrs	r24, 6
 202:	0e c0       	rjmp	.+28     	; 0x220 <callSignaledHandlers+0x44>

			 //If so, reset its signal
			 db.dbUnits[i].bitmap &= ~_BV(6);
 204:	df 01       	movw	r26, r30
 206:	85 81       	ldd	r24, Z+5	; 0x05
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	85 83       	std	Z+5, r24	; 0x05

			 //Call item and pass on last known state
			 (*db.dbUnits[i].handler)(i,(db.dbUnits[i].bitmap & _BV(5))>>5);
 20c:	02 80       	ldd	r0, Z+2	; 0x02
 20e:	f3 81       	ldd	r31, Z+3	; 0x03
 210:	e0 2d       	mov	r30, r0
 212:	15 96       	adiw	r26, 0x05	; 5
 214:	6c 91       	ld	r22, X
 216:	65 fb       	bst	r22, 5
 218:	66 27       	eor	r22, r22
 21a:	60 f9       	bld	r22, 0
 21c:	8c 2f       	mov	r24, r28
 21e:	09 95       	icall
 {
	 int i;

	 if (!db.signalReady) return;
	 
	 for (i=0;i<DBNC_NUM_DEBOUNCERS;i++)
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	c6 30       	cpi	r28, 0x06	; 6
 224:	d1 05       	cpc	r29, r1
 226:	11 f7       	brne	.-60     	; 0x1ec <callSignaledHandlers+0x10>
			 (*db.dbUnits[i].handler)(i,(db.dbUnits[i].bitmap & _BV(5))>>5);
		 }
	 }

	 //Reset signal
	 db.signalReady = 0;
 228:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <db+0x24>

 }
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <registerDebouncer>:

 void registerDebouncer(volatile uint8_t *port,uint8_t bit,uint8_t index,uint8_t Asynchronous,debounceHandler handler)
 {
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
	 //Store port pointer
	 //Store handler pointer
	 //Reset counter to 0
	 //Store bitmap of bit offset/asynchronous state
	 //Set signaled to 0
	 db.dbUnits[index].port 		= port;
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	fa 01       	movw	r30, r20
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	e4 0f       	add	r30, r20
 240:	f5 1f       	adc	r31, r21
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	ec 57       	subi	r30, 0x7C	; 124
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	91 83       	std	Z+1, r25	; 0x01
 24c:	80 83       	st	Z, r24
	 db.dbUnits[index].handler 	= handler;
 24e:	13 83       	std	Z+3, r17	; 0x03
 250:	02 83       	std	Z+2, r16	; 0x02
	 db.dbUnits[index].counter  	= 0;
 252:	14 82       	std	Z+4, r1	; 0x04

	 db.dbUnits[index].bitmap	= _BITSHIFTBY((Asynchronous != 0),7)|
 254:	21 11       	cpse	r18, r1
 256:	20 e8       	ldi	r18, 0x80	; 128
	 _BITSHIFTBY((((*port) & _BV(bit)) != 0),5)|
 258:	fc 01       	movw	r30, r24
 25a:	80 81       	ld	r24, Z
	 //Set signaled to 0
	 db.dbUnits[index].port 		= port;
	 db.dbUnits[index].handler 	= handler;
	 db.dbUnits[index].counter  	= 0;

	 db.dbUnits[index].bitmap	= _BITSHIFTBY((Asynchronous != 0),7)|
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	06 2e       	mov	r0, r22
 260:	02 c0       	rjmp	.+4      	; 0x266 <registerDebouncer+0x34>
 262:	95 95       	asr	r25
 264:	87 95       	ror	r24
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <registerDebouncer+0x30>
 26a:	80 fd       	sbrc	r24, 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <registerDebouncer+0x40>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	01 c0       	rjmp	.+2      	; 0x274 <registerDebouncer+0x42>
 272:	80 e2       	ldi	r24, 0x20	; 32
 274:	62 2b       	or	r22, r18
 276:	68 2b       	or	r22, r24
 278:	fa 01       	movw	r30, r20
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	e4 0f       	add	r30, r20
 280:	f5 1f       	adc	r31, r21
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	ec 57       	subi	r30, 0x7C	; 124
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	65 83       	std	Z+5, r22	; 0x05
	 _BITSHIFTBY((((*port) & _BV(bit)) != 0),5)|
	 bit;
 }
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <signalChangedState>:

 void signalChangedState(uint8_t index,uint8_t counterTop)
 {
	 if (!counterTop)
 292:	61 11       	cpse	r22, r1
 294:	0e c0       	rjmp	.+28     	; 0x2b2 <signalChangedState+0x20>
	 db.dbUnits[index].counter = DBNC_COUNTER_TOP;
 296:	28 2f       	mov	r18, r24
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	28 0f       	add	r18, r24
 29c:	31 1d       	adc	r19, r1
 29e:	28 0f       	add	r18, r24
 2a0:	31 1d       	adc	r19, r1
 2a2:	22 0f       	add	r18, r18
 2a4:	33 1f       	adc	r19, r19
 2a6:	f9 01       	movw	r30, r18
 2a8:	ec 57       	subi	r30, 0x7C	; 124
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	84 83       	std	Z+4, r24	; 0x04
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <signalChangedState+0x38>
	 else
	 db.dbUnits[index].counter = counterTop;
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	28 0f       	add	r18, r24
 2b8:	31 1d       	adc	r19, r1
 2ba:	28 0f       	add	r18, r24
 2bc:	31 1d       	adc	r19, r1
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	f9 01       	movw	r30, r18
 2c4:	ec 57       	subi	r30, 0x7C	; 124
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	64 83       	std	Z+4, r22	; 0x04

	 if (!TCCR0B)
 2ca:	83 b7       	in	r24, 0x33	; 51
 2cc:	81 11       	cpse	r24, r1
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <signalChangedState+0x42>
	 TCCR0B = DBNC_TIMR0_PRESCALER;
 2d0:	84 e0       	ldi	r24, 0x04	; 4
 2d2:	83 bf       	out	0x33, r24	; 51
 2d4:	08 95       	ret

000002d6 <initializeDebouncerTimer>:
 }

 void initializeDebouncerTimer()
 {
	 //Note: doesn't start timer
	 TCCR0A = 0x00;
 2d6:	10 be       	out	0x30, r1	; 48
	 TCCR0B = 0x00;
 2d8:	13 be       	out	0x33, r1	; 51
	 TCNT0  = DBNC_TIMR0_BASEVAL;
 2da:	82 eb       	ldi	r24, 0xB2	; 178
 2dc:	82 bf       	out	0x32, r24	; 50
	 TIMSK = _BV(TOIE0);
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	89 bf       	out	0x39, r24	; 57
 2e2:	08 95       	ret

000002e4 <toggle_output_gpio>:
 void init_external_interrupt1_gpio(void){
	 MCUCR |= (1 << ISC10);				//The rising edge of INT1 generates an interrupt request
	 MCUCR |= (1 << ISC11);
	 
	 GIMSK |= (1 << INT1);				//enable external interrupt 1 in general interrupt mask register
	 SREG |= (1 << SREG_I);				//enable interrupts I in global status register
 2e4:	e8 2f       	mov	r30, r24
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	3a 97       	sbiw	r30, 0x0a	; 10
 2ea:	cf 01       	movw	r24, r30
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	e8 1b       	sub	r30, r24
 2f6:	f9 0b       	sbc	r31, r25
 2f8:	22 ad       	ldd	r18, Z+58	; 0x3a
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <toggle_output_gpio+0x20>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <toggle_output_gpio+0x1c>
 308:	92 2f       	mov	r25, r18
 30a:	98 2b       	or	r25, r24
 30c:	92 af       	std	Z+58, r25	; 0x3a
 30e:	93 ad       	ldd	r25, Z+59	; 0x3b
 310:	89 27       	eor	r24, r25
 312:	83 af       	std	Z+59, r24	; 0x3b
 314:	08 95       	ret

00000316 <__vector_1>:
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_2>:
 }
 
 ISR(INT1_vect){						//External interrupt1 service routine
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
	  
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <generate_KNX>:
		wait_bit();//wait 2 bits
		wait_bit();
		count++;
	//}
	int i;
	if(count == amount_messages){
 33e:	22 d1       	rcall	.+580    	; 0x584 <uart_getc>
 340:	08 95       	ret

00000342 <switch_led>:
}

										//turn on led
//------------------------------------------------------------------------------------------

void switch_led(uint8_t address, int state){
 342:	ef 92       	push	r14
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	00 d0       	rcall	.+0      	; 0x34e <switch_led+0xc>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	dd 27       	eor	r29, r29
	uint8_t data_array[2];
	data_array[0] = 0x00;
 352:	19 82       	std	Y+1, r1	; 0x01
	if(state == 1){
 354:	61 30       	cpi	r22, 0x01	; 1
 356:	71 05       	cpc	r23, r1
 358:	19 f4       	brne	.+6      	; 0x360 <switch_led+0x1e>
		data_array[1] = 0x81;
 35a:	91 e8       	ldi	r25, 0x81	; 129
 35c:	9a 83       	std	Y+2, r25	; 0x02
 35e:	04 c0       	rjmp	.+8      	; 0x368 <switch_led+0x26>
	}
	else if(state == 0){
 360:	67 2b       	or	r22, r23
 362:	11 f4       	brne	.+4      	; 0x368 <switch_led+0x26>
			data_array[1] = 0x80;
 364:	90 e8       	ldi	r25, 0x80	; 128
 366:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	int size_data_array = 2;
	uint8_t length = 2;
	uint8_t repeated = 1;//not repeated
	generate_KNX(normal_priority, length, repeated, data_array, size_data_array, address);
 368:	e8 2e       	mov	r14, r24
 36a:	02 e0       	ldi	r16, 0x02	; 2
 36c:	10 e0       	ldi	r17, 0x00	; 0
 36e:	9e 01       	movw	r18, r28
 370:	2f 5f       	subi	r18, 0xFF	; 255
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	8c e0       	ldi	r24, 0x0C	; 12
 37a:	e1 df       	rcall	.-62     	; 0x33e <generate_KNX>
}
 37c:	ce 5f       	subi	r28, 0xFE	; 254
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ef 90       	pop	r14
 38a:	08 95       	ret

0000038c <changeDimmer>:

void changeDimmer(uint8_t address, int state){
 38c:	ef 92       	push	r14
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	00 d0       	rcall	.+0      	; 0x398 <changeDimmer+0xc>
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	dd 27       	eor	r29, r29
		
		int size_data_array = 2;
		uint8_t data_array[size_data_array];
		data_array[0] = 0x00;
 39c:	19 82       	std	Y+1, r1	; 0x01
		if(state == 1){
 39e:	61 30       	cpi	r22, 0x01	; 1
 3a0:	71 05       	cpc	r23, r1
 3a2:	19 f4       	brne	.+6      	; 0x3aa <changeDimmer+0x1e>
			data_array[1] = 0x8B;//10001011 increases the dimmer with 25%
 3a4:	9b e8       	ldi	r25, 0x8B	; 139
 3a6:	9a 83       	std	Y+2, r25	; 0x02
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <changeDimmer+0x26>
		}
		else if(state == 0){
 3aa:	67 2b       	or	r22, r23
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <changeDimmer+0x26>
			data_array[1] = 0x83;//10000011 decreases the dimmer with 25%
 3ae:	93 e8       	ldi	r25, 0x83	; 131
 3b0:	9a 83       	std	Y+2, r25	; 0x02
		}
		
		
		uint8_t length = 2;
		uint8_t repeated = 1;//not repeated
		generate_KNX(normal_priority, length, repeated, data_array, size_data_array, address);
 3b2:	e8 2e       	mov	r14, r24
 3b4:	02 e0       	ldi	r16, 0x02	; 2
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	9e 01       	movw	r18, r28
 3ba:	2f 5f       	subi	r18, 0xFF	; 255
 3bc:	3f 4f       	sbci	r19, 0xFF	; 255
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	8c e0       	ldi	r24, 0x0C	; 12
 3c4:	bc df       	rcall	.-136    	; 0x33e <generate_KNX>
}
 3c6:	ce 5f       	subi	r28, 0xFE	; 254
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ef 90       	pop	r14
 3d4:	08 95       	ret

000003d6 <main>:
//static uint8_t rx_buffer[BUFFER_SIZE] = "";

int main(void)
{
	
	buttons();
 3d6:	99 d0       	rcall	.+306    	; 0x50a <buttons>
	*/



	return 0;
}
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	08 95       	ret

000003de <ButtonClicker>:

	
}

void ButtonClicker(uint8_t index,uint8_t state)
{
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
	uint8_t address;
	if (state == 0)
 3e4:	61 11       	cpse	r22, r1
 3e6:	44 c0       	rjmp	.+136    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 3e8:	c8 2f       	mov	r28, r24
	{
		
		if(index == 0){
 3ea:	81 11       	cpse	r24, r1
 3ec:	17 c0       	rjmp	.+46     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			//PORTA ^= _BV(index);
			address = 0x0A;//1.1.10 for Led0
			toggle_output_gpio(0xA, 0);
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	8a e0       	ldi	r24, 0x0A	; 10
 3f4:	77 df       	rcall	.-274    	; 0x2e4 <toggle_output_gpio>
			int ret = (PIN('B') & 1 << 0);
 3f6:	80 91 91 ff 	lds	r24, 0xFF91	; 0x80ff91 <__bss_end+0xfee7>
				if(ret == 1){
 3fa:	08 2f       	mov	r16, r24
 3fc:	01 70       	andi	r16, 0x01	; 1
 3fe:	10 e0       	ldi	r17, 0x00	; 0
 400:	80 ff       	sbrs	r24, 0
 402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
					switch_led(address, 1);//send the signal to the KNX
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	8a e0       	ldi	r24, 0x0A	; 10
 40a:	9b df       	rcall	.-202    	; 0x342 <switch_led>
 40c:	15 c0       	rjmp	.+42     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				}
				else if(ret == 0){
 40e:	01 2b       	or	r16, r17
 410:	99 f4       	brne	.+38     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
					switch_led(address, 0);
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	94 df       	rcall	.-216    	; 0x342 <switch_led>
 41a:	0e c0       	rjmp	.+28     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				}
		}
		if(index == 1){//decrease button Dimmer1
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	29 f4       	brne	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			address = 0x0C;//1.1.12 for Dimmer1
			changeDimmer(address, 0);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	8c e0       	ldi	r24, 0x0C	; 12
 426:	b2 df       	rcall	.-156    	; 0x38c <changeDimmer>
 428:	16 c0       	rjmp	.+44     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		}
		if(index == 2){	//decrease button Dimmer2
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	29 f4       	brne	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			address = 0x0D;//1.1.13 for Dimmer2
			changeDimmer(address, 0);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	8d e0       	ldi	r24, 0x0D	; 13
 434:	ab df       	rcall	.-170    	; 0x38c <changeDimmer>
 436:	16 c0       	rjmp	.+44     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

		}
		if(index == 3){//toggle switch for Led1
 438:	c3 30       	cpi	r28, 0x03	; 3
 43a:	69 f4       	brne	.+26     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			address = 0x0A;//1.1.11 for Led1
			
			toggle_output_gpio(0xD, 3);
 43c:	63 e0       	ldi	r22, 0x03	; 3
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	8d e0       	ldi	r24, 0x0D	; 13
 442:	50 df       	rcall	.-352    	; 0x2e4 <toggle_output_gpio>
			int ret = (PIN('D') & 1 << 3);
 444:	80 91 8b ff 	lds	r24, 0xFF8B	; 0x80ff8b <__bss_end+0xfee1>
			if(ret == 1){
				switch_led(address, 1);
			}
			else if(ret == 0){
 448:	83 fd       	sbrc	r24, 3
 44a:	12 c0       	rjmp	.+36     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				switch_led(address, 0);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	8a e0       	ldi	r24, 0x0A	; 10
 452:	77 df       	rcall	.-274    	; 0x342 <switch_led>
 454:	0d c0       	rjmp	.+26     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			}

		}
		if(index == 4){//increase button for Dimmer1
 456:	c4 30       	cpi	r28, 0x04	; 4
 458:	29 f4       	brne	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			address = 0x0C;//1.1.12 for Dimmer1
			changeDimmer(address, 1);
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	8c e0       	ldi	r24, 0x0C	; 12
 460:	95 df       	rcall	.-214    	; 0x38c <changeDimmer>
 462:	06 c0       	rjmp	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>

		}
		if(index == 5){//increase button for Dimmer2
 464:	c5 30       	cpi	r28, 0x05	; 5
 466:	21 f4       	brne	.+8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			address = 0x0D;//1.1.13 for Dimmer2
			changeDimmer(address, 1);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	8d e0       	ldi	r24, 0x0D	; 13
 46e:	8e df       	rcall	.-228    	; 0x38c <changeDimmer>

		}


	}
}
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <__vector_11>:
	It compares these values to the last known state and signals a change
	on any pins that have changed state.

*/
ISR(PCINT0_vect)
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	4f 93       	push	r20
 488:	5f 93       	push	r21
 48a:	6f 93       	push	r22
 48c:	7f 93       	push	r23
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	af 93       	push	r26
 494:	bf 93       	push	r27
 496:	cf 93       	push	r28
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
	uint8_t temp = lastState^PINB;
 49c:	c6 b3       	in	r28, 0x16	; 22
 49e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <lastState>
 4a2:	c8 27       	eor	r28, r24
	lastState = PINB;
 4a4:	86 b3       	in	r24, 0x16	; 22
 4a6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <lastState>

	if ((temp & _BV(0)))
 4aa:	c0 ff       	sbrs	r28, 0
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <__vector_11+0x3c>
		signalChangedState(0,2);
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	ef de       	rcall	.-546    	; 0x292 <signalChangedState>
	if ((temp & _BV(1)))
 4b4:	c1 ff       	sbrs	r28, 1
 4b6:	03 c0       	rjmp	.+6      	; 0x4be <__vector_11+0x46>
		signalChangedState(1,3);
 4b8:	63 e0       	ldi	r22, 0x03	; 3
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	ea de       	rcall	.-556    	; 0x292 <signalChangedState>
	if ((temp & _BV(2)))
 4be:	c2 ff       	sbrs	r28, 2
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__vector_11+0x50>
		signalChangedState(2,4);
 4c2:	64 e0       	ldi	r22, 0x04	; 4
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	e5 de       	rcall	.-566    	; 0x292 <signalChangedState>
	if ((temp & _BV(3)))
 4c8:	c3 ff       	sbrs	r28, 3
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <__vector_11+0x5a>
		signalChangedState(3,5);
 4cc:	65 e0       	ldi	r22, 0x05	; 5
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	e0 de       	rcall	.-576    	; 0x292 <signalChangedState>
	if ((temp & _BV(4)))
 4d2:	c4 ff       	sbrs	r28, 4
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <__vector_11+0x64>
		signalChangedState(4,20);
 4d6:	64 e1       	ldi	r22, 0x14	; 20
 4d8:	84 e0       	ldi	r24, 0x04	; 4
 4da:	db de       	rcall	.-586    	; 0x292 <signalChangedState>
	if ((temp & _BV(5)))
 4dc:	c5 ff       	sbrs	r28, 5
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <__vector_11+0x6e>
		signalChangedState(5,50);
 4e0:	62 e3       	ldi	r22, 0x32	; 50
 4e2:	85 e0       	ldi	r24, 0x05	; 5
 4e4:	d6 de       	rcall	.-596    	; 0x292 <signalChangedState>
	/*if ((temp & _BV(6)))
		signalChangedState(6,200);
	if ((temp & _BV(7)))
		signalChangedState(7,200);
	*/
} 
 4e6:	ff 91       	pop	r31
 4e8:	ef 91       	pop	r30
 4ea:	cf 91       	pop	r28
 4ec:	bf 91       	pop	r27
 4ee:	af 91       	pop	r26
 4f0:	9f 91       	pop	r25
 4f2:	8f 91       	pop	r24
 4f4:	7f 91       	pop	r23
 4f6:	6f 91       	pop	r22
 4f8:	5f 91       	pop	r21
 4fa:	4f 91       	pop	r20
 4fc:	3f 91       	pop	r19
 4fe:	2f 91       	pop	r18
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <buttons>:


void buttons(void)
{
	//Initialize PORTB as all inputs, no internal pull-ups
	DDRB  = 0x00;
 50a:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
 50c:	18 ba       	out	0x18, r1	; 24

	//Initialize PORTD as all outputs, all HIGH (LEDs off)
	DDRD  = 0xFF;
 50e:	cf ef       	ldi	r28, 0xFF	; 255
 510:	c1 bb       	out	0x11, r28	; 17
	PORTD = 0xFF;
 512:	c2 bb       	out	0x12, r28	; 18

	DDRA = 0xFF;
 514:	ca bb       	out	0x1a, r28	; 26
	PORTA = 0xFF;
 516:	cb bb       	out	0x1b, r28	; 27

	//Initial timer setup (does not start timer)
	initializeDebouncerTimer();
 518:	de de       	rcall	.-580    	; 0x2d6 <initializeDebouncerTimer>

	lastState = PINB;
 51a:	86 b3       	in	r24, 0x16	; 22
 51c:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <lastState>

	//void registerDebouncer(volatile uint8_t *port,uint8_t bit,uint8_t index,uint8_t Asynchronous,debounceHandler handler);

	//Fills in details regarding 
	registerDebouncer(&PINB,PB0,0,1,&ButtonClicker);
 520:	0f ee       	ldi	r16, 0xEF	; 239
 522:	11 e0       	ldi	r17, 0x01	; 1
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	86 e3       	ldi	r24, 0x36	; 54
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	81 de       	rcall	.-766    	; 0x232 <registerDebouncer>
	registerDebouncer(&PINB,PB1,1,1,&ButtonClicker);
 530:	21 e0       	ldi	r18, 0x01	; 1
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	86 e3       	ldi	r24, 0x36	; 54
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	7b de       	rcall	.-778    	; 0x232 <registerDebouncer>
	registerDebouncer(&PINB,PB2,2,1,&ButtonClicker);
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	42 e0       	ldi	r20, 0x02	; 2
 540:	62 e0       	ldi	r22, 0x02	; 2
 542:	86 e3       	ldi	r24, 0x36	; 54
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	75 de       	rcall	.-790    	; 0x232 <registerDebouncer>
	registerDebouncer(&PINB,PB3,3,1,&ButtonClicker);
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	43 e0       	ldi	r20, 0x03	; 3
 54c:	63 e0       	ldi	r22, 0x03	; 3
 54e:	86 e3       	ldi	r24, 0x36	; 54
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	6f de       	rcall	.-802    	; 0x232 <registerDebouncer>
	registerDebouncer(&PINB,PB4,4,0,&ButtonClicker);
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	44 e0       	ldi	r20, 0x04	; 4
 558:	64 e0       	ldi	r22, 0x04	; 4
 55a:	86 e3       	ldi	r24, 0x36	; 54
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	69 de       	rcall	.-814    	; 0x232 <registerDebouncer>
	registerDebouncer(&PINB,PB5,5,0,&ButtonClicker);
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	45 e0       	ldi	r20, 0x05	; 5
 564:	65 e0       	ldi	r22, 0x05	; 5
 566:	86 e3       	ldi	r24, 0x36	; 54
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	63 de       	rcall	.-826    	; 0x232 <registerDebouncer>
	//registerDebouncer(&PINB,PB6,6,0,&ButtonClicker);
	//registerDebouncer(&PINB,PB7,7,0,&ButtonClicker);

	//Enable pin-change interrupt & mask
	GIMSK  = _BV(PCIE0);
 56c:	80 e2       	ldi	r24, 0x20	; 32
 56e:	8b bf       	out	0x3b, r24	; 59
	PCMSK0 = 0xFF;
 570:	c0 bd       	out	0x20, r28	; 32

	//Enable interrupts
	sei();
 572:	78 94       	sei

	while(1)
	{
		//This will loop through any signaled debouncer items and
		//call their handlers (doesn't apply to asynchronous)
		callSignaledHandlers();
 574:	33 de       	rcall	.-922    	; 0x1dc <callSignaledHandlers>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 576:	81 ee       	ldi	r24, 0xE1	; 225
 578:	94 e0       	ldi	r25, 0x04	; 4
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <buttons+0x70>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <buttons+0x76>
 580:	00 00       	nop
 582:	f8 cf       	rjmp	.-16     	; 0x574 <buttons+0x6a>

00000584 <uart_getc>:
 */
void uart_puts_P(const char *s) {
  while (pgm_read_byte(s) != 0x00) {
    uart_putc(pgm_read_byte(s++));
  }
}
 584:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <rx_head>
 588:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <rx_tail>
 58c:	98 17       	cp	r25, r24
 58e:	c9 f0       	breq	.+50     	; 0x5c2 <uart_getc+0x3e>
 590:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <rx_tail>
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	2f 5f       	subi	r18, 0xFF	; 255
 598:	3f 4f       	sbci	r19, 0xFF	; 255
 59a:	2f 70       	andi	r18, 0x0F	; 15
 59c:	30 78       	andi	r19, 0x80	; 128
 59e:	33 23       	and	r19, r19
 5a0:	34 f4       	brge	.+12     	; 0x5ae <uart_getc+0x2a>
 5a2:	21 50       	subi	r18, 0x01	; 1
 5a4:	31 09       	sbc	r19, r1
 5a6:	20 6f       	ori	r18, 0xF0	; 240
 5a8:	3f 6f       	ori	r19, 0xFF	; 255
 5aa:	2f 5f       	subi	r18, 0xFF	; 255
 5ac:	3f 4f       	sbci	r19, 0xFF	; 255
 5ae:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <rx_tail>
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	e0 59       	subi	r30, 0x90	; 144
 5b6:	ff 4f       	sbci	r31, 0xFF	; 255
 5b8:	80 81       	ld	r24, Z
 5ba:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <rx_tail>
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	08 95       	ret
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	08 95       	ret

000005c8 <__vector_8>:
/*
 * ISR User Data Regiser Empty
 * Send a char out of buffer via UART. If sending is complete, the 
 * interrupt gets disabled.
 */
ISR(USART_UDRE_vect) {
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	8f 93       	push	r24
 5d4:	9f 93       	push	r25
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31
  uint8_t tmp_tail = 0;
  if (tx_head != tx_tail) {
 5da:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <tx_head>
 5de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 5e2:	98 17       	cp	r25, r24
 5e4:	b1 f0       	breq	.+44     	; 0x612 <__vector_8+0x4a>
    tmp_tail = (tx_tail + 1) % BUFFER_SIZE;
 5e6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	8f 70       	andi	r24, 0x0F	; 15
 5f0:	90 78       	andi	r25, 0x80	; 128
 5f2:	99 23       	and	r25, r25
 5f4:	24 f4       	brge	.+8      	; 0x5fe <__vector_8+0x36>
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	80 6f       	ori	r24, 0xF0	; 240
 5fa:	9f 6f       	ori	r25, 0xFF	; 255
 5fc:	01 96       	adiw	r24, 0x01	; 1
    UDR = tx_buffer[tx_tail];
 5fe:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	e0 5a       	subi	r30, 0xA0	; 160
 606:	ff 4f       	sbci	r31, 0xFF	; 255
 608:	90 81       	ld	r25, Z
 60a:	9c b9       	out	0x0c, r25	; 12
    tx_tail = tmp_tail;
 60c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
 610:	01 c0       	rjmp	.+2      	; 0x614 <__vector_8+0x4c>
  }
  else {
    // disable this interrupt if nothing more to send
    UCSRB &= ~(1 << UDRIE);
 612:	55 98       	cbi	0x0a, 5	; 10
  }
}
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	9f 91       	pop	r25
 61a:	8f 91       	pop	r24
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <__vector_7>:

/*
 * ISR RX complete
 * Receives a char from UART and stores it in ring buffer.
 */
ISR(USART_RX_vect) {
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	2f 93       	push	r18
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
  uint8_t tmp_head = 0;
  tmp_head = (rx_head + 1) % BUFFER_SIZE;
 63a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <rx_head>
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	8f 70       	andi	r24, 0x0F	; 15
 644:	90 78       	andi	r25, 0x80	; 128
 646:	99 23       	and	r25, r25
 648:	24 f4       	brge	.+8      	; 0x652 <__vector_7+0x2c>
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	80 6f       	ori	r24, 0xF0	; 240
 64e:	9f 6f       	ori	r25, 0xFF	; 255
 650:	01 96       	adiw	r24, 0x01	; 1
  if (tmp_head == rx_tail) {
 652:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <rx_tail>
 656:	28 17       	cp	r18, r24
 658:	49 f0       	breq	.+18     	; 0x66c <__vector_7+0x46>
    // buffer overflow error!
  }
  else{

		rx_buffer[rx_head] = UDR;
 65a:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <rx_head>
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	9c b1       	in	r25, 0x0c	; 12
 662:	e0 59       	subi	r30, 0x90	; 144
 664:	ff 4f       	sbci	r31, 0xFF	; 255
 666:	90 83       	st	Z, r25
		rx_head = tmp_head;    
 668:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <rx_head>
		//receive_KNX();
  }
}
 66c:	ff 91       	pop	r31
 66e:	ef 91       	pop	r30
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	2f 91       	pop	r18
 676:	0f 90       	pop	r0
 678:	0f be       	out	0x3f, r0	; 63
 67a:	0f 90       	pop	r0
 67c:	1f 90       	pop	r1
 67e:	18 95       	reti

00000680 <_exit>:
 680:	f8 94       	cli

00000682 <__stop_program>:
 682:	ff cf       	rjmp	.-2      	; 0x682 <__stop_program>
