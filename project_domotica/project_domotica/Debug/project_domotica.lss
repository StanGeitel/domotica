
project_domotica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000880  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000627  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043b  00000000  00000000  0000121b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bf  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f4  00000000  00000000  00001b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00001d87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	82 c0       	rjmp	.+260    	; 0x108 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	9b c0       	rjmp	.+310    	; 0x152 <__vector_13>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	65 c0       	rjmp	.+202    	; 0xf4 <__vector_20>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6c d0       	rcall	.+216    	; 0x11c <main>
  44:	c6 c0       	rjmp	.+396    	; 0x1d2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <set_output_gpio>:
 void init_external_interrupt0_gpio(void){
	MCUCR |= (1 << ISC01);				//The rising edge of INT0 generates an interrupt request
	MCUCR |= (1 << ISC00);
	
	GIMSK |= (1 << INT0);				//enable external interrupt 0 in general interrupt mask register
	SREG |= (1 << SREG_I);				//enable interrupts I in global status register	
  48:	e8 2f       	mov	r30, r24
  4a:	f0 e0       	ldi	r31, 0x00	; 0
  4c:	3a 97       	sbiw	r30, 0x0a	; 10
  4e:	cf 01       	movw	r24, r30
  50:	88 0f       	add	r24, r24
  52:	99 1f       	adc	r25, r25
  54:	88 0f       	add	r24, r24
  56:	99 1f       	adc	r25, r25
  58:	e8 1b       	sub	r30, r24
  5a:	f9 0b       	sbc	r31, r25
  5c:	22 ad       	ldd	r18, Z+58	; 0x3a
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	02 c0       	rjmp	.+4      	; 0x68 <set_output_gpio+0x20>
  64:	88 0f       	add	r24, r24
  66:	99 1f       	adc	r25, r25
  68:	6a 95       	dec	r22
  6a:	e2 f7       	brpl	.-8      	; 0x64 <set_output_gpio+0x1c>
  6c:	98 2f       	mov	r25, r24
  6e:	90 95       	com	r25
  70:	92 23       	and	r25, r18
  72:	92 af       	std	Z+58, r25	; 0x3a
  74:	93 ad       	ldd	r25, Z+59	; 0x3b
  76:	98 2b       	or	r25, r24
  78:	93 af       	std	Z+59, r25	; 0x3b
  7a:	92 ad       	ldd	r25, Z+58	; 0x3a
  7c:	98 2b       	or	r25, r24
  7e:	92 af       	std	Z+58, r25	; 0x3a
  80:	93 ad       	ldd	r25, Z+59	; 0x3b
  82:	89 2b       	or	r24, r25
  84:	83 af       	std	Z+59, r24	; 0x3b
  86:	08 95       	ret

00000088 <clear_output_gpio>:
  88:	e8 2f       	mov	r30, r24
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	3a 97       	sbiw	r30, 0x0a	; 10
  8e:	cf 01       	movw	r24, r30
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	e8 1b       	sub	r30, r24
  9a:	f9 0b       	sbc	r31, r25
  9c:	22 ad       	ldd	r18, Z+58	; 0x3a
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <clear_output_gpio+0x20>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <clear_output_gpio+0x1c>
  ac:	98 2f       	mov	r25, r24
  ae:	90 95       	com	r25
  b0:	29 23       	and	r18, r25
  b2:	22 af       	std	Z+58, r18	; 0x3a
  b4:	23 ad       	ldd	r18, Z+59	; 0x3b
  b6:	29 23       	and	r18, r25
  b8:	23 af       	std	Z+59, r18	; 0x3b
  ba:	22 ad       	ldd	r18, Z+58	; 0x3a
  bc:	82 2b       	or	r24, r18
  be:	82 af       	std	Z+58, r24	; 0x3a
  c0:	83 ad       	ldd	r24, Z+59	; 0x3b
  c2:	98 23       	and	r25, r24
  c4:	93 af       	std	Z+59, r25	; 0x3b
  c6:	08 95       	ret

000000c8 <read_gpio>:
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0a 97       	sbiw	r24, 0x0a	; 10
  cc:	9c 01       	movw	r18, r24
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	fc 01       	movw	r30, r24
  d8:	e2 1b       	sub	r30, r18
  da:	f3 0b       	sbc	r31, r19
  dc:	21 ad       	ldd	r18, Z+57	; 0x39
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__stack+0x9>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <__stack+0x5>
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	82 23       	and	r24, r18
  f0:	93 23       	and	r25, r19
  f2:	08 95       	ret

000000f4 <__vector_20>:
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_1>:
 }

 ISR(INT0_vect){						//interrupt service routine
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
	 
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:
#include "knx.h"
#include "timer.h"

int main(void)
{
	set_output_gpio(0xB, 7);
 11c:	67 e0       	ldi	r22, 0x07	; 7
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	8b e0       	ldi	r24, 0x0B	; 11
 122:	92 df       	rcall	.-220    	; 0x48 <set_output_gpio>
	init_timer0();
 124:	01 d0       	rcall	.+2      	; 0x128 <init_timer0>
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0xa>

00000128 <init_timer0>:
 void clear_int_flag_timer0(void){
	TIFR |= (1 << OCF0A);			//clear interrupt flag on compare register0 A 
 }
 
 void reset_prescaler(void){
	GTCCR |= (1 << PSR10);	
 128:	80 b7       	in	r24, 0x30	; 48
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	80 bf       	out	0x30, r24	; 48
 12e:	80 b7       	in	r24, 0x30	; 48
 130:	82 60       	ori	r24, 0x02	; 2
 132:	80 bf       	out	0x30, r24	; 48
 134:	83 b7       	in	r24, 0x33	; 51
 136:	81 60       	ori	r24, 0x01	; 1
 138:	83 bf       	out	0x33, r24	; 51
 13a:	83 b7       	in	r24, 0x33	; 51
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	83 bf       	out	0x33, r24	; 51
 140:	88 e6       	ldi	r24, 0x68	; 104
 142:	86 bf       	out	0x36, r24	; 54
 144:	89 b7       	in	r24, 0x39	; 57
 146:	81 60       	ori	r24, 0x01	; 1
 148:	89 bf       	out	0x39, r24	; 57
 14a:	8f b7       	in	r24, 0x3f	; 63
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8f bf       	out	0x3f, r24	; 63
 150:	08 95       	ret

00000152 <__vector_13>:
 }

 ISR (TIMER0_COMPA_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	i++;
 174:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 178:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 182:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(i == 5){
 186:	05 97       	sbiw	r24, 0x05	; 5
 188:	99 f4       	brne	.+38     	; 0x1b0 <__vector_13+0x5e>
		if(read_gpio(0xB, 7)){
 18a:	67 e0       	ldi	r22, 0x07	; 7
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	8b e0       	ldi	r24, 0x0B	; 11
 190:	9b df       	rcall	.-202    	; 0xc8 <read_gpio>
 192:	89 2b       	or	r24, r25
 194:	29 f0       	breq	.+10     	; 0x1a0 <__vector_13+0x4e>
			clear_output_gpio(0xB, 7);
 196:	67 e0       	ldi	r22, 0x07	; 7
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	75 df       	rcall	.-278    	; 0x88 <clear_output_gpio>
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <__vector_13+0x56>
		}
		else{
			set_output_gpio(0xB, 7);
 1a0:	67 e0       	ldi	r22, 0x07	; 7
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	8b e0       	ldi	r24, 0x0B	; 11
 1a6:	50 df       	rcall	.-352    	; 0x48 <set_output_gpio>
		}
		i = 0;
 1a8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 1ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
