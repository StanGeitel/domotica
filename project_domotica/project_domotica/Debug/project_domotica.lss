
project_domotica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800080  00800080  0000028c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc8  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079d  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e4  00000000  00000000  00001769  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000542  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055e  00000000  00000000  000024e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00002a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	73 c0       	rjmp	.+230    	; 0xea <__vector_1>
   4:	7c c0       	rjmp	.+248    	; 0xfe <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	b5 c0       	rjmp	.+362    	; 0x17a <__vector_7>
  10:	85 c0       	rjmp	.+266    	; 0x11c <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	43 c0       	rjmp	.+134    	; 0x9e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ed       	ldi	r30, 0xD8	; 216
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e8       	ldi	r26, 0x80	; 128
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 38       	cpi	r26, 0x85	; 133
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	5c d0       	rcall	.+184    	; 0x112 <main>
  5a:	bc c0       	rjmp	.+376    	; 0x1d4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <set_output_gpio>:
 void init_external_interrupt1_gpio(void){
	 MCUCR |= (1 << ISC10);				//The rising edge of INT1 generates an interrupt request
	 MCUCR |= (1 << ISC11);
	 
	 GIMSK |= (1 << INT1);				//enable external interrupt 1 in general interrupt mask register
	 SREG |= (1 << SREG_I);				//enable interrupts I in global status register
  5e:	e8 2f       	mov	r30, r24
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	3a 97       	sbiw	r30, 0x0a	; 10
  64:	cf 01       	movw	r24, r30
  66:	88 0f       	add	r24, r24
  68:	99 1f       	adc	r25, r25
  6a:	88 0f       	add	r24, r24
  6c:	99 1f       	adc	r25, r25
  6e:	e8 1b       	sub	r30, r24
  70:	f9 0b       	sbc	r31, r25
  72:	22 ad       	ldd	r18, Z+58	; 0x3a
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <set_output_gpio+0x20>
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	6a 95       	dec	r22
  80:	e2 f7       	brpl	.-8      	; 0x7a <set_output_gpio+0x1c>
  82:	98 2f       	mov	r25, r24
  84:	90 95       	com	r25
  86:	92 23       	and	r25, r18
  88:	92 af       	std	Z+58, r25	; 0x3a
  8a:	93 ad       	ldd	r25, Z+59	; 0x3b
  8c:	98 2b       	or	r25, r24
  8e:	93 af       	std	Z+59, r25	; 0x3b
  90:	92 ad       	ldd	r25, Z+58	; 0x3a
  92:	98 2b       	or	r25, r24
  94:	92 af       	std	Z+58, r25	; 0x3a
  96:	93 ad       	ldd	r25, Z+59	; 0x3b
  98:	89 2b       	or	r24, r25
  9a:	83 af       	std	Z+59, r24	; 0x3b
  9c:	08 95       	ret

0000009e <__vector_11>:
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	1f 92       	push	r1
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	dd 27       	eor	r29, r29
  b6:	96 b3       	in	r25, 0x16	; 22
  b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
  bc:	89 27       	eor	r24, r25
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	86 b3       	in	r24, 0x16	; 22
  c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	0f 90       	pop	r0
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_1>:
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_2>:
 }
 
 ISR(INT1_vect){						//External interrupt1 service routine
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
	  
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:
 112:	67 e0       	ldi	r22, 0x07	; 7
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	8b e0       	ldi	r24, 0x0B	; 11
 118:	a2 df       	rcall	.-188    	; 0x5e <set_output_gpio>
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0x8>

0000011c <__vector_8>:
/*
 * ISR User Data Regiser Empty
 * Send a char out of buffer via UART. If sending is complete, the 
 * interrupt gets disabled.
 */
ISR(USART_UDRE_vect) {
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
  uint8_t tmp_tail = 0;
  if (tx_head != tx_tail) {
 12e:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <tx_head>
 132:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <tx_tail>
 136:	98 17       	cp	r25, r24
 138:	b1 f0       	breq	.+44     	; 0x166 <__vector_8+0x4a>
    tmp_tail = (tx_tail + 1) % BUFFER_SIZE;
 13a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <tx_tail>
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	90 78       	andi	r25, 0x80	; 128
 146:	99 23       	and	r25, r25
 148:	24 f4       	brge	.+8      	; 0x152 <__vector_8+0x36>
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	80 6f       	ori	r24, 0xF0	; 240
 14e:	9f 6f       	ori	r25, 0xFF	; 255
 150:	01 96       	adiw	r24, 0x01	; 1
    UDR = tx_buffer[tx_tail];
 152:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <tx_tail>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e0 5a       	subi	r30, 0xA0	; 160
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	90 81       	ld	r25, Z
 15e:	9c b9       	out	0x0c, r25	; 12
    tx_tail = tmp_tail;
 160:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <tx_tail>
 164:	01 c0       	rjmp	.+2      	; 0x168 <__vector_8+0x4c>
  }
  else {
    // disable this interrupt if nothing more to send
    UCSRB &= ~(1 << UDRIE);
 166:	55 98       	cbi	0x0a, 5	; 10
  }
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_7>:

/*
 * ISR RX complete
 * Receives a char from UART and stores it in ring buffer.
 */
ISR(USART_RX_vect) {
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
  uint8_t tmp_head = 0;
  tmp_head = (rx_head + 1) % BUFFER_SIZE;
 18e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <rx_head>
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	90 78       	andi	r25, 0x80	; 128
 19a:	99 23       	and	r25, r25
 19c:	24 f4       	brge	.+8      	; 0x1a6 <__vector_7+0x2c>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	80 6f       	ori	r24, 0xF0	; 240
 1a2:	9f 6f       	ori	r25, 0xFF	; 255
 1a4:	01 96       	adiw	r24, 0x01	; 1
  if (tmp_head == rx_tail) {
 1a6:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <rx_tail>
 1aa:	28 17       	cp	r18, r24
 1ac:	49 f0       	breq	.+18     	; 0x1c0 <__vector_7+0x46>
    // buffer overflow error!
  }
  else {
    rx_buffer[rx_head] = UDR;
 1ae:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <rx_head>
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	9c b1       	in	r25, 0x0c	; 12
 1b6:	e0 59       	subi	r30, 0x90	; 144
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	90 83       	st	Z, r25
    rx_head = tmp_head;
 1bc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <rx_head>
  }
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
