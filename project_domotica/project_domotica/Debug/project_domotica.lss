
project_domotica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800080  00800080  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6a  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f0  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000636  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f2  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055e  00000000  00000000  000025e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	53 c0       	rjmp	.+166    	; 0xaa <__vector_1>
   4:	5c c0       	rjmp	.+184    	; 0xbe <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	ba c0       	rjmp	.+372    	; 0x184 <__vector_7>
  10:	8a c0       	rjmp	.+276    	; 0x126 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ee       	ldi	r30, 0xE2	; 226
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e8       	ldi	r26, 0x80	; 128
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 38       	cpi	r26, 0x85	; 133
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3c d0       	rcall	.+120    	; 0xd2 <main>
  5a:	c1 c0       	rjmp	.+386    	; 0x1de <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_11>:
 void init_external_interrupt1_gpio(void){
	 MCUCR |= (1 << ISC10);				//The rising edge of INT1 generates an interrupt request
	 MCUCR |= (1 << ISC11);
	 
	 GIMSK |= (1 << INT1);				//enable external interrupt 1 in general interrupt mask register
	 SREG |= (1 << SREG_I);				//enable interrupts I in global status register
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	dd 27       	eor	r29, r29
  76:	96 b3       	in	r25, 0x16	; 22
  78:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
  7c:	89 27       	eor	r24, r25
  7e:	89 83       	std	Y+1, r24	; 0x01
  80:	86 b3       	in	r24, 0x16	; 22
  82:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	0f 90       	pop	r0
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <__vector_1>:
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <__vector_2>:
 }
 
 ISR(INT1_vect){						//External interrupt1 service routine
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
	  
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <main>:
		_delay_ms(50);
		PORTD &= ~(1 << LED_BIT);
		_delay_ms(50);
	}
	*/
	init_uart();
  d2:	04 d0       	rcall	.+8      	; 0xdc <init_uart>

	sei();
  d4:	78 94       	sei

	while (1) {
		uart_putc(0b11101010);
  d6:	8a ee       	ldi	r24, 0xEA	; 234
  d8:	09 d0       	rcall	.+18     	; 0xec <uart_putc>
  da:	fd cf       	rjmp	.-6      	; 0xd6 <main+0x4>

000000dc <init_uart>:
 */
void uart_puts_P(const char *s) {
  while (pgm_read_byte(s) != 0x00) {
    uart_putc(pgm_read_byte(s++));
  }
}
  dc:	12 b8       	out	0x02, r1	; 2
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	89 b9       	out	0x09, r24	; 9
  e2:	88 e9       	ldi	r24, 0x98	; 152
  e4:	8a b9       	out	0x0a, r24	; 10
  e6:	86 e2       	ldi	r24, 0x26	; 38
  e8:	83 b9       	out	0x03, r24	; 3
  ea:	08 95       	ret

000000ec <uart_putc>:
  ec:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <tx_head>
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	2f 70       	andi	r18, 0x0F	; 15
  f8:	30 78       	andi	r19, 0x80	; 128
  fa:	33 23       	and	r19, r19
  fc:	34 f4       	brge	.+12     	; 0x10a <uart_putc+0x1e>
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	31 09       	sbc	r19, r1
 102:	20 6f       	ori	r18, 0xF0	; 240
 104:	3f 6f       	ori	r19, 0xFF	; 255
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <tx_tail>
 10e:	29 17       	cp	r18, r25
 110:	e1 f3       	breq	.-8      	; 0x10a <uart_putc+0x1e>
 112:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <tx_head>
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e0 5a       	subi	r30, 0xA0	; 160
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 83       	st	Z, r24
 11e:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <tx_head>
 122:	55 9a       	sbi	0x0a, 5	; 10
 124:	08 95       	ret

00000126 <__vector_8>:
/*
 * ISR User Data Regiser Empty
 * Send a char out of buffer via UART. If sending is complete, the 
 * interrupt gets disabled.
 */
ISR(USART_UDRE_vect) {
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
  uint8_t tmp_tail = 0;
  if (tx_head != tx_tail) {
 138:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <tx_head>
 13c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <tx_tail>
 140:	98 17       	cp	r25, r24
 142:	b1 f0       	breq	.+44     	; 0x170 <__vector_8+0x4a>
    tmp_tail = (tx_tail + 1) % BUFFER_SIZE;
 144:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <tx_tail>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	90 78       	andi	r25, 0x80	; 128
 150:	99 23       	and	r25, r25
 152:	24 f4       	brge	.+8      	; 0x15c <__vector_8+0x36>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	80 6f       	ori	r24, 0xF0	; 240
 158:	9f 6f       	ori	r25, 0xFF	; 255
 15a:	01 96       	adiw	r24, 0x01	; 1
    UDR = tx_buffer[tx_tail];
 15c:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <tx_tail>
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e0 5a       	subi	r30, 0xA0	; 160
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	90 81       	ld	r25, Z
 168:	9c b9       	out	0x0c, r25	; 12
    tx_tail = tmp_tail;
 16a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <tx_tail>
 16e:	01 c0       	rjmp	.+2      	; 0x172 <__vector_8+0x4c>
  }
  else {
    // disable this interrupt if nothing more to send
    UCSRB &= ~(1 << UDRIE);
 170:	55 98       	cbi	0x0a, 5	; 10
  }
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_7>:

/*
 * ISR RX complete
 * Receives a char from UART and stores it in ring buffer.
 */
ISR(USART_RX_vect) {
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
  uint8_t tmp_head = 0;
  tmp_head = (rx_head + 1) % BUFFER_SIZE;
 198:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <rx_head>
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	8f 70       	andi	r24, 0x0F	; 15
 1a2:	90 78       	andi	r25, 0x80	; 128
 1a4:	99 23       	and	r25, r25
 1a6:	24 f4       	brge	.+8      	; 0x1b0 <__vector_7+0x2c>
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	80 6f       	ori	r24, 0xF0	; 240
 1ac:	9f 6f       	ori	r25, 0xFF	; 255
 1ae:	01 96       	adiw	r24, 0x01	; 1
  if (tmp_head == rx_tail) {
 1b0:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <rx_tail>
 1b4:	28 17       	cp	r18, r24
 1b6:	49 f0       	breq	.+18     	; 0x1ca <__vector_7+0x46>
    // buffer overflow error!
  }
  else{

		rx_buffer[rx_head] = UDR;
 1b8:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <rx_head>
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	9c b1       	in	r25, 0x0c	; 12
 1c0:	e0 59       	subi	r30, 0x90	; 144
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	90 83       	st	Z, r25
		rx_head = tmp_head;    
 1c6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <rx_head>
		//receive_KNX();
  }
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
